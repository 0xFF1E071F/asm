;
; +-------------------------------------------------------------------------+
; |   This file	has been generated by The Interactive Disassembler (IDA)    |
; |	      Copyright	(c) 2011 Hex-Rays, <support@hex-rays.com>	    |
; |			 License info: 48-327F-7274-B7			    |
; |			       ESET spol. s r.o.			    |
; +-------------------------------------------------------------------------+
;
;
; +-------------------------------------------------------------------------+
; |   This file	has been generated by The Interactive Disassembler (IDA)    |
; |	      Copyright	(c) 2011 Hex-Rays, <support@hex-rays.com>	    |
; |			 License info: 48-327F-7274-B7			    |
; |			       ESET spol. s r.o.			    |
; +-------------------------------------------------------------------------+
;
; Input	MD5   :	857DDBA88456B024EC5CA2A437ACF446
; Input	CRC32 :	C34F5EE2

; File Name   :	C:\YandexDisk\Разработки\Ассемблер\Graph\Graph.exe
; Format      :	Portable executable for	80386 (PE)
; Imagebase   :	400000
; Section 1. (virtual address 00001000)
; Virtual size			: 0000195C (   6492.)
; Section size in file		: 00001A00 (   6656.)
; Offset to raw	data for section: 00000400
; Flags	60000020: Text Executable Readable
; Alignment	: default

		.686p
		.mmx
		.model flat

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text		segment	para public 'CODE' use32
		assume cs:_text
		;org 401000h
		assume es:nothing, ss:nothing, ds:_data, fs:nothing, gs:nothing
		db 5 dup(0CCh)
; ---------------------------------------------------------------------------
		jmp	_DrawScene@0	; DrawScene()

; =============== S U B	R O U T	I N E =======================================

; Attributes: noreturn thunk

		public start
start		proc near
		jmp	_start
start		endp

; ---------------------------------------------------------------------------
		jmp	_FinalGL@0	; FinalGL()
; ---------------------------------------------------------------------------

loc_401014:				; DATA XREF: RegWndClass()+14o
		jmp	_WndProc@16	; WndProc(x,x,x,x)
; ---------------------------------------------------------------------------
		jmp	_InitGL@0	; InitGL()
; ---------------------------------------------------------------------------
		jmp	_RegWndClass@0	; RegWndClass()
; ---------------------------------------------------------------------------
		jmp	_WinMain@16	; WinMain(x,x,x,x)
; ---------------------------------------------------------------------------
		jmp	_InitScene@0	; InitScene()
; ---------------------------------------------------------------------------
		db 33h dup(0CCh)

; =============== S U B	R O U T	I N E =======================================

; Attributes: noreturn

_start		proc near		; CODE XREF: startj
		push	0		; lpModuleName
		call	_GetModuleHandleA@4 ; GetModuleHandleA(x)
		mov	hInstance, eax
		call	_GetCommandLineA@0 ; GetCommandLineA()
		mov	CommandLine, eax
		push	0Ah		; CmdShow
		push	CommandLine	; CmdLine
		push	0		; hPrevInst
		push	hInstance	; hInst
		call	_WinMain@16	; WinMain(x,x,x,x)
		push	eax		; uExitCode
		call	_ExitProcess@4	; ExitProcess(x)
_start		endp


; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

; void __cdecl WinMain(unsigned	int hInst, unsigned int	hPrevInst, unsigned int	CmdLine, unsigned int CmdShow)
_WinMain@16	proc near		; CODE XREF: .text:00401023j
					; _start+26p

msg		= MSG ptr -1Ch
hInst		= dword	ptr  8
hPrevInst	= dword	ptr  0Ch
CmdLine		= dword	ptr  10h
CmdShow		= dword	ptr  14h

		push	ebp
		mov	ebp, esp
		add	esp, 0FFFFFFE4h
		call	_RegWndClass@0	; RegWndClass()
		or	eax, eax
		jnz	short @C0001
		push	0		; uType
		push	offset MBCaptionErr ; "Error"
		push	offset EMClassNotReg ; "Window class not registered!"
		push	0		; hWnd
		call	_MessageBoxA@16	; MessageBoxA(x,x,x,x)
		leave
		retn	10h
; ---------------------------------------------------------------------------

@C0001:					; CODE XREF: WinMain(x,x,x,x)+Dj
		push	2710h		; lpMenuName
		push	hInstance	; hInstance
		call	_LoadMenuA@8	; LoadMenuA(x,x)
		mov	hMenu, eax
		push	0		; lpParam
		push	hInstance	; hInstance
		push	hMenu		; hMenu
		push	0		; hWndParent
		push	80000000h	; nHeight
		push	80000000h	; nWidth
		push	80000000h	; Y
		push	80000000h	; X
		push	0CF0000h	; dwStyle
		push	offset AppName	; "Window"
		push	offset ClassName ; "WinClass"
		push	0		; dwExStyle
		call	_CreateWindowExA@48 ; CreateWindowExA(x,x,x,x,x,x,x,x,x,x,x,x)
		or	eax, eax
		jnz	short @C0003
		push	0		; uType
		push	offset MBCaptionErr ; "Error"
		push	offset EMWinNotCreate ;	"Window	not created!"
		push	0		; hWnd
		call	_MessageBoxA@16	; MessageBoxA(x,x,x,x)
		leave
		retn	10h
; ---------------------------------------------------------------------------

@C0003:					; CODE XREF: WinMain(x,x,x,x)+77j
		mov	hWin, eax
		push	1		; nCmdShow
		push	hWin		; hWnd
		call	_ShowWindow@8	; ShowWindow(x,x)
		push	hWin		; hWnd
		call	_UpdateWindow@4	; UpdateWindow(x)

@C0005:					; CODE XREF: WinMain(x,x,x,x)+D2j
		push	0		; wMsgFilterMax
		push	0		; wMsgFilterMin
		push	0		; hWnd
		lea	eax, [ebp+msg]
		push	eax		; lpMsg
		call	_GetMessageA@16	; GetMessageA(x,x,x,x)
		or	eax, eax
		jz	short @C0006
		lea	eax, [ebp+msg]
		push	eax		; lpMsg
		call	_TranslateMessage@4 ; TranslateMessage(x)
		lea	eax, [ebp+msg]
		push	eax		; lpMsg
		call	_DispatchMessageA@4 ; DispatchMessageA(x)
		jmp	short @C0005
; ---------------------------------------------------------------------------

@C0006:					; CODE XREF: WinMain(x,x,x,x)+BEj
		mov	eax, [ebp+msg.wParam]
		leave
		retn	10h
_WinMain@16	endp


; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

; int __stdcall	RegWndClass()
_RegWndClass@0	proc near		; CODE XREF: .text:0040101Ej
					; WinMain(x,x,x,x)+6p

wc		= WNDCLASSEXA ptr -30h

		push	ebp
		mov	ebp, esp
		add	esp, 0FFFFFFD0h
		mov	[ebp+wc.cbSize], 30h
		mov	[ebp+wc.style],	3
		mov	[ebp+wc.lpfnWndProc], offset loc_401014
		mov	[ebp+wc.cbClsExtra], 0
		mov	[ebp+wc.cbWndExtra], 0
		push	hInstance
		pop	[ebp+wc.hInstance]
		push	7F00h		; lpIconName
		push	0		; hInstance
		call	_LoadIconA@8	; LoadIconA(x,x)
		mov	[ebp+wc.hIcon],	eax
		mov	[ebp+wc.hIconSm], eax
		push	7F00h		; lpCursorName
		push	0		; hInstance
		call	_LoadCursorA@8	; LoadCursorA(x,x)
		mov	[ebp+wc.hCursor], eax
		mov	[ebp+wc.hbrBackground],	6
		mov	[ebp+wc.lpszMenuName], 0
		mov	[ebp+wc.lpszClassName],	offset ClassName ; "WinClass"
		lea	eax, [ebp+wc]
		push	eax		; WNDCLASSEXA *
		call	_RegisterClassExA@4 ; RegisterClassExA(x)
		leave
		retn
_RegWndClass@0	endp


; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

; void __cdecl WndProc(unsigned	int hWnd, unsigned int uMsg, unsigned int wParam, unsigned int lParam)
_WndProc@16	proc near		; CODE XREF: .text:loc_401014j

hWnd		= dword	ptr  8
uMsg		= dword	ptr  0Ch
wParam		= dword	ptr  10h
lParam		= dword	ptr  14h

		push	ebp
		mov	ebp, esp
		mov	eax, [ebp+uMsg]
		cmp	eax, 1
		jnz	short @C0009
		call	_InitGL@0	; InitGL()
		call	_InitScene@0	; InitScene()
		jmp	short @C0010
; ---------------------------------------------------------------------------

@C0009:					; CODE XREF: WndProc(x,x,x,x)+9j
		cmp	eax, 111h
		jnz	short @C000C
		mov	eax, [ebp+wParam]
		and	eax, 0FFFFh
		cmp	eax, 2716h
		jnz	short @C000E
		push	0		; lParam
		push	0		; wParam
		push	10h		; Msg
		push	[ebp+hWnd]	; hWnd
		call	_SendMessageA@16 ; SendMessageA(x,x,x,x)
		jmp	short @C0010
; ---------------------------------------------------------------------------

@C000E:					; CODE XREF: WndProc(x,x,x,x)+2Bj
		cmp	eax, 2713h
		jnz	short @C0010
		push	0		; uType
		push	offset MBCaptionAbt ; "About"
		push	offset MSAbout	; "Window with menu."
		push	0		; hWnd
		call	_MessageBoxA@16	; MessageBoxA(x,x,x,x)
		jmp	short @C0010
; ---------------------------------------------------------------------------

@C000C:					; CODE XREF: WndProc(x,x,x,x)+1Cj
		cmp	eax, 10h
		jnz	short @C0014
		push	[ebp+hWnd]	; hWnd
		call	_DestroyWindow@4 ; DestroyWindow(x)
		jmp	short @C0010
; ---------------------------------------------------------------------------

@C0014:					; CODE XREF: WndProc(x,x,x,x)+5Cj
		cmp	eax, 2
		jnz	short @C0017
		push	0		; nExitCode
		call	_PostQuitMessage@4 ; PostQuitMessage(x)
		jmp	short @C0010
; ---------------------------------------------------------------------------

@C0017:					; CODE XREF: WndProc(x,x,x,x)+6Bj
		push	[ebp+lParam]	; lParam
		push	[ebp+wParam]	; wParam
		push	[ebp+uMsg]	; Msg
		push	[ebp+hWnd]	; hWnd
		call	_DefWindowProcA@16 ; DefWindowProcA(x,x,x,x)
		leave
		retn	10h
; ---------------------------------------------------------------------------

@C0010:					; CODE XREF: WndProc(x,x,x,x)+15j
					; WndProc(x,x,x,x)+3Bj	...
		xor	eax, eax
		leave
		retn	10h
_WndProc@16	endp


; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

; int __stdcall	InitGL()
_InitGL@0	proc near		; CODE XREF: .text:00401019j
					; WndProc(x,x,x,x)+Bp

iPF		= dword	ptr -4

		push	ebp
		mov	ebp, esp
		add	esp, 0FFFFFFFCh
		push	hWin		; hWnd
		call	_GetDC@4	; GetDC(x)
		or	eax, eax
		jnz	short @C001A
		leave
		retn
; ---------------------------------------------------------------------------

@C001A:					; CODE XREF: InitGL()+13j
		mov	hDC, eax
		mov	ebx, 28h
		mov	ecx, ebx
		xor	ax, ax
		mov	edi, offset pfd
		rep stosb
		mov	ax, 28h
		mov	pfd.nSize, ax
		mov	pfd.nVersion, 1
		mov	pfd.dwFlags, 25h
		mov	pfd.dwLayerMask, 0
		mov	pfd.iPixelType,	0
		mov	pfd.cColorBits,	20h
		mov	pfd.cDepthBits,	20h
		mov	pfd.cRedBits, 8
		mov	pfd.cRedShift, 10h
		mov	pfd.cGreenBits,	8
		mov	pfd.cGreenShift, 8
		mov	pfd.cBlueBits, 8
		mov	pfd.cAccumBits,	40h
		mov	pfd.cAccumRedBits, 10h
		mov	pfd.cAccumGreenBits, 10h
		mov	pfd.cAccumBlueBits, 10h
		mov	pfd.cStencilBits, 8
		push	offset pfd	; ppfd
		push	hDC		; hdc
		call	_ChoosePixelFormat@8 ; ChoosePixelFormat(x,x)
		mov	[ebp+iPF], eax
		or	eax, eax
		jnz	short @C001C
		mov	[ebp+iPF], 1
		push	offset pfd	; ppfd
		push	28h		; nBytes
		push	[ebp+iPF]	; iPixelFormat
		push	hDC		; hdc
		call	_DescribePixelFormat@16	; DescribePixelFormat(x,x,x,x)
		or	eax, eax
		jnz	short @C001C
		leave
		retn
; ---------------------------------------------------------------------------

@C001C:					; CODE XREF: InitGL()+C4j InitGL()+E4j
		push	offset pfd	; ppfd
		push	[ebp+iPF]	; format
		push	hDC		; hdc
		call	_SetPixelFormat@12 ; SetPixelFormat(x,x,x)
		or	eax, eax
		jnz	short @C0020
		leave
		retn
; ---------------------------------------------------------------------------

@C0020:					; CODE XREF: InitGL()+FDj
		push	hDC		; HDC
		call	_wglCreateContext@4 ; wglCreateContext(x)
		or	eax, eax
		jnz	short @C0022
		leave
		retn
; ---------------------------------------------------------------------------

@C0022:					; CODE XREF: InitGL()+10Ej
		mov	hRC, eax
		push	hRC		; HGLRC
		push	hDC		; HDC
		call	_wglMakeCurrent@8 ; wglMakeCurrent(x,x)
		leave
		retn
_InitGL@0	endp


; =============== S U B	R O U T	I N E =======================================


; int __stdcall	FinalGL()
_FinalGL@0	proc near		; CODE XREF: .text:0040100Fj
		cmp	hRC, 0
		jz	short @C0024
		push	0		; HGLRC
		push	0		; HDC
		call	_wglMakeCurrent@8 ; wglMakeCurrent(x,x)
		push	hRC		; HGLRC
		call	_wglDeleteContext@4 ; wglDeleteContext(x)
		mov	hRC, 0

@C0024:					; CODE XREF: FinalGL()+7j
		cmp	hDC, 0
		jz	short _InitScene@0 ; InitScene()
		push	hDC		; hDC
		push	hWin		; hWnd
		call	_ReleaseDC@8	; ReleaseDC(x,x)
		mov	hDC, 0
_FinalGL@0	endp ; sp-analysis failed


; =============== S U B	R O U T	I N E =======================================


; int __stdcall	InitScene()
_InitScene@0	proc near		; CODE XREF: .text:00401028j
					; WndProc(x,x,x,x)+10p	...
		push	1D01h
		call	_glShadeModel@4	; glShadeModel(x)
		push	_0d5
		push	_1d0
		push	_0d7
		push	_1d0
		call	_glClearColor@16 ; glClearColor(x,x,x,x)
		push	3FF00000h
		push	0
		call	_glClearDepth@8	; glClearDepth(x,x)
		push	0B71h
		call	_glEnable@4	; glEnable(x)
		push	203h
		call	_glDepthFunc@4	; glDepthFunc(x)
		push	1102h
		push	0C50h
		call	_glHint@8	; glHint(x,x)
		mov	eax, 1
		retn
_InitScene@0	endp


; =============== S U B	R O U T	I N E =======================================


; int __stdcall	DrawScene()
_DrawScene@0	proc near		; CODE XREF: .text:00401005j
		push	4100h
		call	_glClear@4	; glClear(x)
		call	_glLoadIdentity@0 ; glLoadIdentity()
		push	0C0C00000h
		push	0
		push	0BFC00000h
		call	_glTranslatef@12 ; glTranslatef(x,x,x)
		push	4
		call	_glBegin@4	; glBegin(x)
		push	0
		push	3F800000h
		push	0
		call	_glVertex3f@12	; glVertex3f(x,x,x)
		push	0
		push	0BF800000h
		push	0BF800000h
		call	_glVertex3f@12	; glVertex3f(x,x,x)
		push	0
		push	0BF800000h
		push	3F800000h
		call	_glVertex3f@12	; glVertex3f(x,x,x)
		call	_glEnd@0	; glEnd()
		push	0
		push	0
		push	40400000h
		call	_glTranslatef@12 ; glTranslatef(x,x,x)
		push	7
		call	_glBegin@4	; glBegin(x)
		push	0
		push	3F800000h
		push	0BF800000h
		call	_glVertex3f@12	; glVertex3f(x,x,x)
		push	0
		push	3F800000h
		push	3F800000h
		call	_glVertex3f@12	; glVertex3f(x,x,x)
		push	0
		push	0BF800000h
		push	3F800000h
		call	_glVertex3f@12	; glVertex3f(x,x,x)
		push	0
		push	0BF800000h
		push	0BF800000h
		call	_glVertex3f@12	; glVertex3f(x,x,x)
		call	_glEnd@0	; glEnd()
		xor	eax, eax
		retn
_DrawScene@0	endp

; ---------------------------------------------------------------------------
		db 128h	dup(0CCh)
; [00000006 BYTES: COLLAPSED FUNCTION AdjustWindowRect(x,x,x). PRESS KEYPAD "+"	TO EXPAND]
; [00000006 BYTES: COLLAPSED FUNCTION BeginPaint(x,x). PRESS KEYPAD "+"	TO EXPAND]
; [00000006 BYTES: COLLAPSED FUNCTION CreateWindowExA(x,x,x,x,x,x,x,x,x,x,x,x).	PRESS KEYPAD "+" TO EXPAND]
; [00000006 BYTES: COLLAPSED FUNCTION CreateWindowExW(x,x,x,x,x,x,x,x,x,x,x,x).	PRESS KEYPAD "+" TO EXPAND]
; [00000006 BYTES: COLLAPSED FUNCTION DefWindowProcA(x,x,x,x). PRESS KEYPAD "+"	TO EXPAND]
; [00000006 BYTES: COLLAPSED FUNCTION DestroyWindow(x).	PRESS KEYPAD "+" TO EXPAND]
; [00000006 BYTES: COLLAPSED FUNCTION DispatchMessageA(x). PRESS KEYPAD	"+" TO EXPAND]
; [00000006 BYTES: COLLAPSED FUNCTION EndPaint(x,x). PRESS KEYPAD "+" TO EXPAND]
; [00000006 BYTES: COLLAPSED FUNCTION GetClientRect(x,x). PRESS	KEYPAD "+" TO EXPAND]
; [00000006 BYTES: COLLAPSED FUNCTION GetCursorPos(x). PRESS KEYPAD "+"	TO EXPAND]
; [00000006 BYTES: COLLAPSED FUNCTION GetDC(x).	PRESS KEYPAD "+" TO EXPAND]
; [00000006 BYTES: COLLAPSED FUNCTION GetFocus(). PRESS	KEYPAD "+" TO EXPAND]
; [00000006 BYTES: COLLAPSED FUNCTION GetKeyState(x). PRESS KEYPAD "+" TO EXPAND]
; [00000006 BYTES: COLLAPSED FUNCTION GetMessageA(x,x,x,x). PRESS KEYPAD "+" TO	EXPAND]
; [00000006 BYTES: COLLAPSED FUNCTION GetSysColor(x). PRESS KEYPAD "+" TO EXPAND]
; [00000006 BYTES: COLLAPSED FUNCTION GetSystemMetrics(x). PRESS KEYPAD	"+" TO EXPAND]
; [00000006 BYTES: COLLAPSED FUNCTION GetWindowRect(x,x). PRESS	KEYPAD "+" TO EXPAND]
; [00000006 BYTES: COLLAPSED FUNCTION InvalidateRect(x,x,x). PRESS KEYPAD "+" TO EXPAND]
; [00000006 BYTES: COLLAPSED FUNCTION LoadCursorA(x,x).	PRESS KEYPAD "+" TO EXPAND]
; [00000006 BYTES: COLLAPSED FUNCTION LoadIconA(x,x). PRESS KEYPAD "+" TO EXPAND]
; [00000006 BYTES: COLLAPSED FUNCTION LoadMenuA(x,x). PRESS KEYPAD "+" TO EXPAND]
; [00000006 BYTES: COLLAPSED FUNCTION MessageBoxA(x,x,x,x). PRESS KEYPAD "+" TO	EXPAND]
; [00000006 BYTES: COLLAPSED FUNCTION PeekMessageA(x,x,x,x,x). PRESS KEYPAD "+"	TO EXPAND]
; [00000006 BYTES: COLLAPSED FUNCTION PostMessageA(x,x,x,x). PRESS KEYPAD "+" TO EXPAND]
; [00000006 BYTES: COLLAPSED FUNCTION PostQuitMessage(x). PRESS	KEYPAD "+" TO EXPAND]
; [00000006 BYTES: COLLAPSED FUNCTION RegisterClassA(x). PRESS KEYPAD "+" TO EXPAND]
; [00000006 BYTES: COLLAPSED FUNCTION RegisterClassExA(x). PRESS KEYPAD	"+" TO EXPAND]
; [00000006 BYTES: COLLAPSED FUNCTION RegisterClassW(x). PRESS KEYPAD "+" TO EXPAND]
; [00000006 BYTES: COLLAPSED FUNCTION ReleaseCapture().	PRESS KEYPAD "+" TO EXPAND]
; [00000006 BYTES: COLLAPSED FUNCTION ReleaseDC(x,x). PRESS KEYPAD "+" TO EXPAND]
; [00000006 BYTES: COLLAPSED FUNCTION SendMessageA(x,x,x,x). PRESS KEYPAD "+" TO EXPAND]
; [00000006 BYTES: COLLAPSED FUNCTION SetCapture(x). PRESS KEYPAD "+" TO EXPAND]
; [00000006 BYTES: COLLAPSED FUNCTION SetSysColors(x,x,x). PRESS KEYPAD	"+" TO EXPAND]
; [00000006 BYTES: COLLAPSED FUNCTION ShowWindow(x,x). PRESS KEYPAD "+"	TO EXPAND]
; [00000006 BYTES: COLLAPSED FUNCTION TranslateMessage(x). PRESS KEYPAD	"+" TO EXPAND]
; [00000006 BYTES: COLLAPSED FUNCTION UpdateWindow(x). PRESS KEYPAD "+"	TO EXPAND]
; [00000006 BYTES: COLLAPSED FUNCTION CloseHandle(x). PRESS KEYPAD "+" TO EXPAND]
; [00000006 BYTES: COLLAPSED FUNCTION CreateFileA(x,x,x,x,x,x,x). PRESS	KEYPAD "+" TO EXPAND]
; [00000006 BYTES: COLLAPSED FUNCTION CreateFileMappingA(x,x,x,x,x,x). PRESS KEYPAD "+"	TO EXPAND]
; [00000006 BYTES: COLLAPSED FUNCTION CreateFileW(x,x,x,x,x,x,x). PRESS	KEYPAD "+" TO EXPAND]
; [00000006 BYTES: COLLAPSED FUNCTION ExitProcess(x). PRESS KEYPAD "+" TO EXPAND]
; [00000006 BYTES: COLLAPSED FUNCTION GetCommandLineA(). PRESS KEYPAD "+" TO EXPAND]
; [00000006 BYTES: COLLAPSED FUNCTION GetModuleHandleA(x). PRESS KEYPAD	"+" TO EXPAND]
; [00000006 BYTES: COLLAPSED FUNCTION GetVersionExA(x).	PRESS KEYPAD "+" TO EXPAND]
; [00000006 BYTES: COLLAPSED FUNCTION LocalAlloc(x,x). PRESS KEYPAD "+"	TO EXPAND]
; [00000006 BYTES: COLLAPSED FUNCTION LocalFree(x). PRESS KEYPAD "+" TO	EXPAND]
; [00000006 BYTES: COLLAPSED FUNCTION MapViewOfFile(x,x,x,x,x).	PRESS KEYPAD "+" TO EXPAND]
; [00000006 BYTES: COLLAPSED FUNCTION ReadFile(x,x,x,x,x). PRESS KEYPAD	"+" TO EXPAND]
; [00000006 BYTES: COLLAPSED FUNCTION SetFilePointer(x,x,x,x). PRESS KEYPAD "+"	TO EXPAND]
; [00000006 BYTES: COLLAPSED FUNCTION Sleep(x).	PRESS KEYPAD "+" TO EXPAND]
; [00000006 BYTES: COLLAPSED FUNCTION UnmapViewOfFile(x). PRESS	KEYPAD "+" TO EXPAND]
; [00000006 BYTES: COLLAPSED FUNCTION ChoosePixelFormat(x,x). PRESS KEYPAD "+" TO EXPAND]
; [00000006 BYTES: COLLAPSED FUNCTION CreateCompatibleDC(x). PRESS KEYPAD "+" TO EXPAND]
; [00000006 BYTES: COLLAPSED FUNCTION CreateDIBSection(x,x,x,x,x,x). PRESS KEYPAD "+" TO EXPAND]
; [00000006 BYTES: COLLAPSED FUNCTION CreatePalette(x).	PRESS KEYPAD "+" TO EXPAND]
; [00000006 BYTES: COLLAPSED FUNCTION DeleteDC(x). PRESS KEYPAD	"+" TO EXPAND]
; [00000006 BYTES: COLLAPSED FUNCTION DeleteObject(x). PRESS KEYPAD "+"	TO EXPAND]
; [00000006 BYTES: COLLAPSED FUNCTION DescribePixelFormat(x,x,x,x). PRESS KEYPAD "+" TO	EXPAND]
; [00000006 BYTES: COLLAPSED FUNCTION GdiFlush(). PRESS	KEYPAD "+" TO EXPAND]
; [00000006 BYTES: COLLAPSED FUNCTION GetPaletteEntries(x,x,x,x). PRESS	KEYPAD "+" TO EXPAND]
; [00000006 BYTES: COLLAPSED FUNCTION GetPixelFormat(x). PRESS KEYPAD "+" TO EXPAND]
; [00000006 BYTES: COLLAPSED FUNCTION GetStockObject(x). PRESS KEYPAD "+" TO EXPAND]
; [00000006 BYTES: COLLAPSED FUNCTION RealizePalette(x). PRESS KEYPAD "+" TO EXPAND]
; [00000006 BYTES: COLLAPSED FUNCTION SelectObject(x,x). PRESS KEYPAD "+" TO EXPAND]
; [00000006 BYTES: COLLAPSED FUNCTION SelectPalette(x,x,x). PRESS KEYPAD "+" TO	EXPAND]
; [00000006 BYTES: COLLAPSED FUNCTION SetDIBits(x,x,x,x,x,x,x).	PRESS KEYPAD "+" TO EXPAND]
; [00000006 BYTES: COLLAPSED FUNCTION SetPaletteEntries(x,x,x,x). PRESS	KEYPAD "+" TO EXPAND]
; [00000006 BYTES: COLLAPSED FUNCTION SetPixelFormat(x,x,x). PRESS KEYPAD "+" TO EXPAND]
; [00000006 BYTES: COLLAPSED FUNCTION SetSystemPaletteUse(x,x).	PRESS KEYPAD "+" TO EXPAND]
; [00000006 BYTES: COLLAPSED FUNCTION SwapBuffers(x). PRESS KEYPAD "+" TO EXPAND]
; [00000006 BYTES: COLLAPSED FUNCTION UnrealizeObject(x). PRESS	KEYPAD "+" TO EXPAND]
; [00000006 BYTES: COLLAPSED FUNCTION glBegin(x). PRESS	KEYPAD "+" TO EXPAND]
; [00000006 BYTES: COLLAPSED FUNCTION glBitmap(x,x,x,x,x,x,x). PRESS KEYPAD "+"	TO EXPAND]
; [00000006 BYTES: COLLAPSED FUNCTION glCallList(x). PRESS KEYPAD "+" TO EXPAND]
; [00000006 BYTES: COLLAPSED FUNCTION glCallLists(x,x,x). PRESS	KEYPAD "+" TO EXPAND]

; =============== S U B	R O U T	I N E =======================================

; Attributes: thunk

; __stdcall glClear(x)
_glClear@4	proc near		; CODE XREF: DrawScene()+5p
		jmp	ds:__imp__glClear@4 ; glClear(x)
_glClear@4	endp


; =============== S U B	R O U T	I N E =======================================

; Attributes: thunk

; __stdcall glClearColor(x, x, x, x)
_glClearColor@16 proc near		; CODE XREF: InitScene()+22p
		jmp	ds:__imp__glClearColor@16 ; glClearColor(x,x,x,x)
_glClearColor@16 endp

; [00000006 BYTES: COLLAPSED FUNCTION glClearDepth(x,x). PRESS KEYPAD "+" TO EXPAND]
; [00000006 BYTES: COLLAPSED FUNCTION glClearIndex(x). PRESS KEYPAD "+"	TO EXPAND]
; [00000006 BYTES: COLLAPSED FUNCTION glDepthFunc(x). PRESS KEYPAD "+" TO EXPAND]
; [00000006 BYTES: COLLAPSED FUNCTION glDisable(x). PRESS KEYPAD "+" TO	EXPAND]
; [00000006 BYTES: COLLAPSED FUNCTION glDrawBuffer(x). PRESS KEYPAD "+"	TO EXPAND]
; [00000006 BYTES: COLLAPSED FUNCTION glEnable(x). PRESS KEYPAD	"+" TO EXPAND]
; [00000006 BYTES: COLLAPSED FUNCTION glEnd(). PRESS KEYPAD "+"	TO EXPAND]

; =============== S U B	R O U T	I N E =======================================

; Attributes: thunk

; int __stdcall	glEndList()
_glEndList@0	proc near
		jmp	ds:__imp__glEndList@0 ;	glEndList()
_glEndList@0	endp

; [00000006 BYTES: COLLAPSED FUNCTION glEvalMesh2(x,x,x,x,x). PRESS KEYPAD "+" TO EXPAND]
; [00000006 BYTES: COLLAPSED FUNCTION glGenLists(x). PRESS KEYPAD "+" TO EXPAND]
; [00000006 BYTES: COLLAPSED FUNCTION glHint(x,x). PRESS KEYPAD	"+" TO EXPAND]
; [00000006 BYTES: COLLAPSED FUNCTION glIsList(x). PRESS KEYPAD	"+" TO EXPAND]
; [00000006 BYTES: COLLAPSED FUNCTION glListBase(x). PRESS KEYPAD "+" TO EXPAND]
; [00000006 BYTES: COLLAPSED FUNCTION glLoadIdentity().	PRESS KEYPAD "+" TO EXPAND]
; [00000006 BYTES: COLLAPSED FUNCTION glMap2f(x,x,x,x,x,x,x,x,x,x). PRESS KEYPAD "+" TO	EXPAND]
; [00000006 BYTES: COLLAPSED FUNCTION glMapGrid2f(x,x,x,x,x,x).	PRESS KEYPAD "+" TO EXPAND]
; [00000006 BYTES: COLLAPSED FUNCTION glMatrixMode(x). PRESS KEYPAD "+"	TO EXPAND]
; [00000006 BYTES: COLLAPSED FUNCTION glNewList(x,x). PRESS KEYPAD "+" TO EXPAND]
; [00000006 BYTES: COLLAPSED FUNCTION glNormal3dv(x). PRESS KEYPAD "+" TO EXPAND]
; [00000006 BYTES: COLLAPSED FUNCTION glOrtho(x,x,x,x,x,x,x,x,x,x,x,x).	PRESS KEYPAD "+" TO EXPAND]
; [00000006 BYTES: COLLAPSED FUNCTION glPixelStorei(x,x). PRESS	KEYPAD "+" TO EXPAND]
; [00000006 BYTES: COLLAPSED FUNCTION glPopAttrib(). PRESS KEYPAD "+" TO EXPAND]
; [00000006 BYTES: COLLAPSED FUNCTION glPopMatrix(). PRESS KEYPAD "+" TO EXPAND]
; [00000006 BYTES: COLLAPSED FUNCTION glPushAttrib(x). PRESS KEYPAD "+"	TO EXPAND]
; [00000006 BYTES: COLLAPSED FUNCTION glPushMatrix(). PRESS KEYPAD "+" TO EXPAND]
; [00000006 BYTES: COLLAPSED FUNCTION glRotatef(x,x,x,x). PRESS	KEYPAD "+" TO EXPAND]
; [00000006 BYTES: COLLAPSED FUNCTION glScalef(x,x,x). PRESS KEYPAD "+"	TO EXPAND]
; [00000006 BYTES: COLLAPSED FUNCTION glShadeModel(x). PRESS KEYPAD "+"	TO EXPAND]
; [00000006 BYTES: COLLAPSED FUNCTION glTranslatef(x,x,x). PRESS KEYPAD	"+" TO EXPAND]
; [00000006 BYTES: COLLAPSED FUNCTION glVertex2f(x,x). PRESS KEYPAD "+"	TO EXPAND]
; [00000006 BYTES: COLLAPSED FUNCTION glVertex3dv(x). PRESS KEYPAD "+" TO EXPAND]
; [00000006 BYTES: COLLAPSED FUNCTION glVertex3f(x,x,x). PRESS KEYPAD "+" TO EXPAND]
; [00000006 BYTES: COLLAPSED FUNCTION glViewport(x,x,x,x). PRESS KEYPAD	"+" TO EXPAND]
; [00000006 BYTES: COLLAPSED FUNCTION wglCreateContext(x). PRESS KEYPAD	"+" TO EXPAND]
; [00000006 BYTES: COLLAPSED FUNCTION wglDeleteContext(x). PRESS KEYPAD	"+" TO EXPAND]
; [00000006 BYTES: COLLAPSED FUNCTION wglMakeCurrent(x,x). PRESS KEYPAD	"+" TO EXPAND]
		db 'МММММММММММММММММММММММММММММММММММММММММММММММММММММММММММММММММ'
		db 'МММММММММММММММММММММММММММММММММММММММММММММММММММММММММММММММММ'
		db 'МММММММММММММММММММММММММММММММММММММММММММММММММММММММММММММММММ'
		db 'МММММММММММММММММММММММММММММММММММММММММММММММММММММММММММММММММ'
		db 'МММММММММММММММММММММММММММММММММММММММММММММММММММММММММММММММММ'
		db 'МММММММММММММММММММММММММММММММММММММММММММММММММММММММММММММММММ'
		db 'МММММММММММММММММММММММММММММММММММММММММММММММММММММММММММММММММ'
		db 'МММММММММММММММММММММММММММММММММММММММММММММММММММММММММММММММММ'
		db 'МММММММММММММММММММММММММММММММММММММММММММММММММММММММММММММММММ'
		db 'МММММММММММММММММММММММММММММММММММММММММММММММММММММММММММММММММ'
		db 'МММММММММММММММММММММММММММММММММММММММММММММММММММММММММММММММММ'
		db 'МММММММММММММММММММММММММММММММММММММММММММММММММММММММММММММММММ'
		db 'МММММММММММММММММММММММММММММММММММММММММММММММММММММММММММММММММ'
		db 'МММММММММММММММММММММММММММММММММММММММММММММММММММММММММММММММММ'
		db 'МММММММММММММММММММММММММММММММММММММММММММММММММММММММММММММММММ'
		db 'МММММММММММММММММММММММММММММММММММММММММММММММММММММММММММММММММ'
		db 'МММММММММММММММММММММММММММММММММММММММММММММММММММММММММММММММММ'
		db 'МММММММММММММММММММММММММММММММММММММММММММММММММММММММММММММММММ'
		db 'МММММММММММММММММММММММММММММММММММММММММММММММММММММММММММММММММ'
		db 'МММММММММММММММММММММММММММММММММММММММММММММММММММММММММММММММММ'
		db 'МММММММММММММММММММММММММММММММММММММММММММММММММММММММММММММММММ'
		db 'МММММММММММММММММММММММММММММММММММММММММММММММММММММММММММММММММ'
		db 'МММММММММММММММММММММММММММММММММММММММММММММММММММММММММММММММММ'
		db 'МММММММММММММММММММММММММММММММММММММММММММММММММММММММММММММММММ'
		db 'МММММММММММММММММММММММММММММММММММММММММММММММММММММММММММММММММ'
		db 'МММММММММММММММММММММММММММММММММММММММММММММММММММММММММММММММММ'
		db 'МММММММММММММММММММММММММММММММММММММММММММММММММММММММММММММММММ'
		db 'МММММММММММММММММММММММММММММММММММММММММММММММММММММММММММММММММ'
		db 'МММММММММММММММММММММММММММММММММММММММММММММММММММММММММММММММММ'
		db 'МММММММММММММММММММММММММММММММММММММММММММММММММММММММММММММММММ'
		db 'МММММММММММММММММММММММММММММММММММММММММММММММММММММММММММММММММ'
		db 'МММММММММММММММММММММММММММММММММММММММММММММММММММММММММММММММММ'
		db 'МММММММММММММММММММММММММММММММММММММММММММММММММММММММММММММММММ'
		db 'МММММММММММММММММММММММММММММММММММММММММММММММММММММММММММММММММ'
		db 'МММММММММММММММММММММММММММММММММММММММММММММММММММММММММММММММММ'
		db 'МММММММММММММММММММММММММММММММММММММММММММММММММММММММММММММММММ'
		db 'МММММММММММММММММММММММММММММММММММММММММММММММММММММММММММММММММ'
		db 'МММММММММММММММММММММММММММММММММММММММММММММММММММММММММММММММММ'
		db 'МММММММММММММММММММММММММММММММММММММММММММММММММММММММММММММММММ'
		db 'МММММММММММММММММММММММММММММММММММММММММММММММММММММММММММММММММ'
		db 'МММММММММММММММММММММММММММММММММММММММММММММММММММММММММММММММММ'
		db 'МММММММММММММММММММММММММММММММММММММММММММММММММММММММММММММММММ'
		db 'МММММММММММММММММММММММММММММММММММММММММММММММММММММММММММММММММ'
		db 'МММММММММММММММММММММММММММММММММММММММММММММММММММММММММММММММММ'
		db 'МММММММММММММММММММММММММММММММММММММММММММММММММММММММММММММММММ'
		db 'МММММММММММММММММММММММММММММММММММММММММММММММММММММММММММММММММ'
		db 'МММММММММММММММММММММММММММММММММММММММММММММММММММММММММММММММММ'
		db 'МММММММММММММММММММММММММММММММММММММММММММММММММММММММММММММММММ'
		db 'МММММММММММММММММММММММММММММММММММММММММММММММММММММММММММММММММ'
		db 'МММММММММММММММММММММММММММММММММММММММММММММММММММММММММММММММММ'
		db 'МММММММММММММММММММММММММММММММММММММММММММММММММММММММММММММММММ'
		db 'МММММММММММММММММММММММММММММММММММММММММММММММММММММММММММММММММ'
		db 'МММММММММММММММММММММММММММММММММММММММММММММММММММММММММММММММММ'
		db 'МММММММММММММММММММММММММММММММММММММММММММММММММММММММММММММММММ'
		db 'МММММММММММММММММММММММММММММММММММММММММММММММММММММММММММММММММ'
		db 'МММММММММММММММММММММММММММММММММММММММММММММММММММММММММММММММММ'
		db 'МММММММММММММММММММММММММММММММММММММММММММММММММММММММММММММММММ'
		db 'МММММММММММММММММММММММММММММММММММММММММММММММММММММММММММММММММ'
		db 'МММММММММММММММММММММММММММММММММММММММММММММММММММММММММММММММММ'
		db 'МММММММММММММММММММММММММММММММММММММММММММММММММММММММММММММММММ'
		db 'МММММММММММММММММММММММММММММММММММММММММММММММММММММММММММММММММ'
		db 'МММММММММММММММММММММММММММММММММММММММММММММММММММММММММММММММММ'
		db 'МММММММММММММММММММММММММММММММММММММММММММММММММММММММММММММММММ'
		db 'МММММММММММММММММММММММММММММММММММММММММММММММММММММММММММММММММ'
		db 'МММММММММММММММММММММММММММММММММММММММММММММММММММММММММММММММММ'
		db 'МММММММММММММММ',0
		align 10h
		dd 28h dup(0)
		dd 180h	dup(?)
_text		ends

; Section 2. (virtual address 00003000)
; Virtual size			: 00000173 (	371.)
; Section size in file		: 00000200 (	512.)
; Offset to raw	data for section: 00001E00
; Flags	40000040: Data Readable
; Alignment	: default
; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	para public 'DATA' use32
		assume cs:_rdata
		;org 403000h
		db    0
		db    0
		db    0
		db    0
		db  68h	; h
		db 0CBh	; Л
		db  16h
		db  58h	; X
		db    0
		db    0
		db    0
		db    0
		db    4
		db    0
		db    0
		db    0
		db  10h
		db    1
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db  3Ah	; :
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db  68h	; h
		db 0CBh	; Л
		db  16h
		db  58h	; X
		db    0
		db    0
		db    0
		db    0
		db    2
		db    0
		db    0
		db    0
		db  43h	; C
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db  10h
		db  3Bh	; ;
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		align 1000h
_rdata		ends

; Section 3. (virtual address 00004000)
; Virtual size			: 000001FC (	508.)
; Section size in file		: 00000200 (	512.)
; Offset to raw	data for section: 00002000
; Flags	C0000040: Data Readable	Writable
; Alignment	: default
; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read/Write
_data		segment	para public 'DATA' use32
		assume cs:_data
		;org 404000h
; char ClassName[9]
ClassName	db 'WinClass',0         ; DATA XREF: WinMain(x,x,x,x)+69o
					; RegWndClass()+61o
; char AppName[7]
AppName		db 'Window',0           ; DATA XREF: WinMain(x,x,x,x)+64o
; char MenuName[9]
MenuName	db 'IDR_MENU',0
; char MBCaptionErr[6]
MBCaptionErr	db 'Error',0            ; DATA XREF: WinMain(x,x,x,x)+11o
					; WinMain(x,x,x,x)+7Bo
; char MBCaptionAbt[6]
MBCaptionAbt	db 'About',0            ; DATA XREF: WndProc(x,x,x,x)+46o
; char EMClassNotReg[29]
EMClassNotReg	db 'Window class not registered!',0 ; DATA XREF: WinMain(x,x,x,x)+16o
; char EMWinNotCreate[20]
EMWinNotCreate	db 'Window not created!',0 ; DATA XREF: WinMain(x,x,x,x)+80o
; char EMDCNotGet[24]
EMDCNotGet	db 'Device context not get!',0
; char MSAbout[18]
MSAbout		db 'Window with menu.',0 ; DATA XREF: WndProc(x,x,x,x)+4Bo
; unsigned int 1d0
_1d0		dd 3F800000h		; DATA XREF: InitScene()+10r
					; InitScene()+1Cr
; unsigned int 0d7
_0d7		dd 3F333333h		; DATA XREF: InitScene()+16r
; unsigned int 0d5
_0d5		dd 3F000000h		; DATA XREF: InitScene()+Ar
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
; HINSTANCE hInstance
hInstance	dd 0			; DATA XREF: _start+7w	_start+20r ...
; unsigned int CommandLine
CommandLine	dd 0			; DATA XREF: _start+11w _start+18r
; HMENU	hMenu
hMenu		dd 0			; DATA XREF: WinMain(x,x,x,x)+36w
					; WinMain(x,x,x,x)+43r
; HDC hDC
hDC		dd 0			; DATA XREF: InitGL():@C001Aw
					; InitGL()+B4r	...
; HGLRC	hRC
hRC		dd 0			; DATA XREF: InitGL():@C0022w
					; InitGL()+117r ...
; HWND hWin
hWin		dd 0			; DATA XREF: WinMain(x,x,x,x):@C0003w
					; WinMain(x,x,x,x)+97r	...
; PIXELFORMATDESCRIPTOR	pfd
pfd		PIXELFORMATDESCRIPTOR <0> ; DATA XREF: InitGL()+26o
					; InitGL()+31w	...
		align 1000h
_data		ends

;
; Imports from gdi32.dll
;
; Section 4. (virtual address 00005000)
; Virtual size			: 00000EA6 (   3750.)
; Section size in file		: 00001000 (   4096.)
; Offset to raw	data for section: 00002200
; Flags	C0000040: Data Readable	Writable
; Alignment	: default
; ===========================================================================

; Segment type:	Externs
; _idata
; BOOL __stdcall DeleteObject(HGDIOBJ ho)
		extrn __imp__DeleteObject@4:dword ; DATA XREF: DeleteObject(x)r
; BOOL __stdcall UnrealizeObject(HGDIOBJ h)
		extrn __imp__UnrealizeObject@4:dword ; DATA XREF: UnrealizeObject(x)r
; BOOL __stdcall SwapBuffers(HDC)
		extrn __imp__SwapBuffers@4:dword ; DATA	XREF: SwapBuffers(x)r
; UINT __stdcall SetSystemPaletteUse(HDC hdc, UINT use)
		extrn __imp__SetSystemPaletteUse@8:dword
					; DATA XREF: SetSystemPaletteUse(x,x)r
; BOOL __stdcall SetPixelFormat(HDC hdc, int format, const PIXELFORMATDESCRIPTOR *ppfd)
		extrn __imp__SetPixelFormat@12:dword ; DATA XREF: SetPixelFormat(x,x,x)r
; UINT __stdcall SetPaletteEntries(HPALETTE hpal, UINT iStart, UINT cEntries, const PALETTEENTRY *pPalEntries)
		extrn __imp__SetPaletteEntries@16:dword
					; DATA XREF: SetPaletteEntries(x,x,x,x)r
; int __stdcall	SetDIBits(HDC hdc, HBITMAP hbm,	UINT start, UINT cLines, const void *lpBits, const BITMAPINFO *lpbmi, UINT ColorUse)
		extrn __imp__SetDIBits@28:dword	; DATA XREF: SetDIBits(x,x,x,x,x,x,x)r
; HPALETTE __stdcall SelectPalette(HDC hdc, HPALETTE hPal, BOOL	bForceBkgd)
		extrn __imp__SelectPalette@12:dword ; DATA XREF: SelectPalette(x,x,x)r
; HGDIOBJ __stdcall SelectObject(HDC hdc, HGDIOBJ h)
		extrn __imp__SelectObject@8:dword ; DATA XREF: SelectObject(x,x)r
; UINT __stdcall RealizePalette(HDC hdc)
		extrn __imp__RealizePalette@4:dword ; DATA XREF: RealizePalette(x)r
; HGDIOBJ __stdcall GetStockObject(int i)
		extrn __imp__GetStockObject@4:dword ; DATA XREF: GetStockObject(x)r
; int __stdcall	GetPixelFormat(HDC hdc)
		extrn __imp__GetPixelFormat@4:dword ; DATA XREF: GetPixelFormat(x)r
; UINT __stdcall GetPaletteEntries(HPALETTE hpal, UINT iStart, UINT cEntries, LPPALETTEENTRY pPalEntries)
		extrn __imp__GetPaletteEntries@16:dword
					; DATA XREF: GetPaletteEntries(x,x,x,x)r
; BOOL __stdcall GdiFlush()
		extrn __imp__GdiFlush@0:dword ;	DATA XREF: GdiFlush()r
; int __stdcall	DescribePixelFormat(HDC	hdc, int iPixelFormat, UINT nBytes, LPPIXELFORMATDESCRIPTOR ppfd)
		extrn __imp__DescribePixelFormat@16:dword
					; DATA XREF: DescribePixelFormat(x,x,x,x)r
; BOOL __stdcall DeleteDC(HDC hdc)
		extrn __imp__DeleteDC@4:dword ;	DATA XREF: DeleteDC(x)r
; HPALETTE __stdcall CreatePalette(const LOGPALETTE *plpal)
		extrn __imp__CreatePalette@4:dword ; DATA XREF:	CreatePalette(x)r
; HBITMAP __stdcall CreateDIBSection(HDC hdc, const BITMAPINFO *lpbmi, UINT usage, void	**ppvBits, HANDLE hSection, DWORD offset)
		extrn __imp__CreateDIBSection@24:dword
					; DATA XREF: CreateDIBSection(x,x,x,x,x,x)r
; HDC __stdcall	CreateCompatibleDC(HDC hdc)
		extrn __imp__CreateCompatibleDC@4:dword	; DATA XREF: CreateCompatibleDC(x)r
; int __stdcall	ChoosePixelFormat(HDC hdc, const PIXELFORMATDESCRIPTOR *ppfd)
		extrn __imp__ChoosePixelFormat@8:dword ; DATA XREF: ChoosePixelFormat(x,x)r
		extrn _gdi32_NULL_THUNK_DATA:byte:3Ch
;
; Imports from kernel32.dll
;
; LPVOID __stdcall MapViewOfFile(HANDLE	hFileMappingObject, DWORD dwDesiredAccess, DWORD dwFileOffsetHigh, DWORD dwFileOffsetLow, SIZE_T dwNumberOfBytesToMap)
		extrn __imp__MapViewOfFile@20:dword ; DATA XREF: MapViewOfFile(x,x,x,x,x)r
; BOOL __stdcall UnmapViewOfFile(LPCVOID lpBaseAddress)
		extrn __imp__UnmapViewOfFile@4:dword ; DATA XREF: UnmapViewOfFile(x)r
; void __stdcall Sleep(DWORD dwMilliseconds)
		extrn __imp__Sleep@4:dword ; DATA XREF:	Sleep(x)r
; DWORD	__stdcall SetFilePointer(HANDLE	hFile, LONG lDistanceToMove, PLONG lpDistanceToMoveHigh, DWORD dwMoveMethod)
		extrn __imp__SetFilePointer@16:dword ; DATA XREF: SetFilePointer(x,x,x,x)r
; BOOL __stdcall ReadFile(HANDLE hFile,	LPVOID lpBuffer, DWORD nNumberOfBytesToRead, LPDWORD lpNumberOfBytesRead, LPOVERLAPPED lpOverlapped)
		extrn __imp__ReadFile@20:dword ; DATA XREF: ReadFile(x,x,x,x,x)r
; BOOL __stdcall CloseHandle(HANDLE hObject)
		extrn __imp__CloseHandle@4:dword ; DATA	XREF: CloseHandle(x)r
; HLOCAL __stdcall LocalFree(HLOCAL hMem)
		extrn __imp__LocalFree@4:dword ; DATA XREF: LocalFree(x)r
; HLOCAL __stdcall LocalAlloc(UINT uFlags, SIZE_T uBytes)
		extrn __imp__LocalAlloc@8:dword	; DATA XREF: LocalAlloc(x,x)r
; BOOL __stdcall GetVersionExA(LPOSVERSIONINFOA	lpVersionInformation)
		extrn __imp__GetVersionExA@4:dword ; DATA XREF:	GetVersionExA(x)r
; HMODULE __stdcall GetModuleHandleA(LPCSTR lpModuleName)
		extrn __imp__GetModuleHandleA@4:dword ;	DATA XREF: GetModuleHandleA(x)r
; LPSTR	__stdcall GetCommandLineA()
		extrn __imp__GetCommandLineA@0:dword ; DATA XREF: GetCommandLineA()r
; void __stdcall ExitProcess(UINT uExitCode)
		extrn __imp__ExitProcess@4:dword ; DATA	XREF: ExitProcess(x)r
; HANDLE __stdcall CreateFileW(LPCWSTR lpFileName, DWORD dwDesiredAccess, DWORD	dwShareMode, LPSECURITY_ATTRIBUTES lpSecurityAttributes, DWORD dwCreationDisposition, DWORD dwFlagsAndAttributes, HANDLE hTemplateFile)
		extrn __imp__CreateFileW@28:dword ; DATA XREF: CreateFileW(x,x,x,x,x,x,x)r
; HANDLE __stdcall CreateFileMappingA(HANDLE hFile, LPSECURITY_ATTRIBUTES lpFileMappingAttributes, DWORD flProtect, DWORD dwMaximumSizeHigh, DWORD dwMaximumSizeLow, LPCSTR lpName)
		extrn __imp__CreateFileMappingA@24:dword
					; DATA XREF: CreateFileMappingA(x,x,x,x,x,x)r
; HANDLE __stdcall CreateFileA(LPCSTR lpFileName, DWORD	dwDesiredAccess, DWORD dwShareMode, LPSECURITY_ATTRIBUTES lpSecurityAttributes,	DWORD dwCreationDisposition, DWORD dwFlagsAndAttributes, HANDLE	hTemplateFile)
		extrn __imp__CreateFileA@28:dword ; DATA XREF: CreateFileA(x,x,x,x,x,x,x)r
		extrn _kernel32_NULL_THUNK_DATA:byte:38h
;
; Imports from opengl32.dll
;
; __declspec(dllimport)	__stdcall glMatrixMode(x)
		extrn __imp__glMatrixMode@4:dword ; DATA XREF: glMatrixMode(x)r
; __declspec(dllimport)	__stdcall glClearDepth(x, x)
		extrn __imp__glClearDepth@8:dword ; DATA XREF: glClearDepth(x,x)r
; __declspec(dllimport)	__stdcall glClearIndex(x)
		extrn __imp__glClearIndex@4:dword ; DATA XREF: glClearIndex(x)r
; __declspec(dllimport)	__stdcall glDepthFunc(x)
		extrn __imp__glDepthFunc@4:dword ; DATA	XREF: glDepthFunc(x)r
; __declspec(dllimport)	__stdcall glDisable(x)
		extrn __imp__glDisable@4:dword ; DATA XREF: glDisable(x)r
; __declspec(dllimport)	__stdcall glDrawBuffer(x)
		extrn __imp__glDrawBuffer@4:dword ; DATA XREF: glDrawBuffer(x)r
; __declspec(dllimport)	__stdcall glEnable(x)
		extrn __imp__glEnable@4:dword ;	DATA XREF: glEnable(x)r
; __declspec(dllimport)	__stdcall glEnd()
		extrn __imp__glEnd@0:dword ; DATA XREF:	glEnd()r
; __declspec(dllimport)	__stdcall glEndList()
		extrn __imp__glEndList@0:dword ; DATA XREF: glEndList()r
; __declspec(dllimport)	__stdcall glEvalMesh2(x, x, x, x, x)
		extrn __imp__glEvalMesh2@20:dword ; DATA XREF: glEvalMesh2(x,x,x,x,x)r
; __declspec(dllimport)	__stdcall glGenLists(x)
		extrn __imp__glGenLists@4:dword	; DATA XREF: glGenLists(x)r
; __declspec(dllimport)	__stdcall glHint(x, x)
		extrn __imp__glHint@8:dword ; DATA XREF: glHint(x,x)r
; __declspec(dllimport)	__stdcall glIsList(x)
		extrn __imp__glIsList@4:dword ;	DATA XREF: glIsList(x)r
; __declspec(dllimport)	__stdcall glListBase(x)
		extrn __imp__glListBase@4:dword	; DATA XREF: glListBase(x)r
; __declspec(dllimport)	__stdcall glLoadIdentity()
		extrn __imp__glLoadIdentity@0:dword ; DATA XREF: glLoadIdentity()r
; __declspec(dllimport)	__stdcall glMap2f(x, x,	x, x, x, x, x, x, x, x)
		extrn __imp__glMap2f@40:dword ;	DATA XREF: glMap2f(x,x,x,x,x,x,x,x,x,x)r
; __declspec(dllimport)	__stdcall glNewList(x, x)
		extrn __imp__glNewList@8:dword ; DATA XREF: glNewList(x,x)r
; __declspec(dllimport)	__stdcall glNormal3dv(x)
		extrn __imp__glNormal3dv@4:dword ; DATA	XREF: glNormal3dv(x)r
; __declspec(dllimport)	__stdcall glOrtho(x, x,	x, x, x, x, x, x, x, x,	x, x)
		extrn __imp__glOrtho@48:dword ;	DATA XREF: glOrtho(x,x,x,x,x,x,x,x,x,x,x,x)r
; __declspec(dllimport)	__stdcall glPixelStorei(x, x)
		extrn __imp__glPixelStorei@8:dword ; DATA XREF:	glPixelStorei(x,x)r
; __declspec(dllimport)	__stdcall glPopAttrib()
		extrn __imp__glPopAttrib@0:dword ; DATA	XREF: glPopAttrib()r
; __declspec(dllimport)	__stdcall glPopMatrix()
		extrn __imp__glPopMatrix@0:dword ; DATA	XREF: glPopMatrix()r
; __declspec(dllimport)	__stdcall glPushAttrib(x)
		extrn __imp__glPushAttrib@4:dword ; DATA XREF: glPushAttrib(x)r
; __declspec(dllimport)	__stdcall glPushMatrix()
		extrn __imp__glPushMatrix@0:dword ; DATA XREF: glPushMatrix()r
; __declspec(dllimport)	__stdcall glRotatef(x, x, x, x)
		extrn __imp__glRotatef@16:dword	; DATA XREF: glRotatef(x,x,x,x)r
; __declspec(dllimport)	__stdcall glScalef(x, x, x)
		extrn __imp__glScalef@12:dword ; DATA XREF: glScalef(x,x,x)r
; __declspec(dllimport)	__stdcall glShadeModel(x)
		extrn __imp__glShadeModel@4:dword ; DATA XREF: glShadeModel(x)r
; __declspec(dllimport)	__stdcall glTranslatef(x, x, x)
		extrn __imp__glTranslatef@12:dword ; DATA XREF:	glTranslatef(x,x,x)r
; __declspec(dllimport)	__stdcall glVertex2f(x,	x)
		extrn __imp__glVertex2f@8:dword	; DATA XREF: glVertex2f(x,x)r
; __declspec(dllimport)	__stdcall glVertex3dv(x)
		extrn __imp__glVertex3dv@4:dword ; DATA	XREF: glVertex3dv(x)r
; __declspec(dllimport)	__stdcall glVertex3f(x,	x, x)
		extrn __imp__glVertex3f@12:dword ; DATA	XREF: glVertex3f(x,x,x)r
; __declspec(dllimport)	__stdcall glViewport(x,	x, x, x)
		extrn __imp__glViewport@16:dword ; DATA	XREF: glViewport(x,x,x,x)r
; HGLRC	__stdcall wglCreateContext(HDC)
		extrn __imp__wglCreateContext@4:dword ;	DATA XREF: wglCreateContext(x)r
; BOOL __stdcall wglDeleteContext(HGLRC)
		extrn __imp__wglDeleteContext@4:dword ;	DATA XREF: wglDeleteContext(x)r
; BOOL __stdcall wglMakeCurrent(HDC, HGLRC)
		extrn __imp__wglMakeCurrent@8:dword ; DATA XREF: wglMakeCurrent(x,x)r
; __declspec(dllimport)	__stdcall glMapGrid2f(x, x, x, x, x, x)
		extrn __imp__glMapGrid2f@24:dword ; DATA XREF: glMapGrid2f(x,x,x,x,x,x)r
; __declspec(dllimport)	__stdcall glBegin(x)
		extrn __imp__glBegin@4:dword ; DATA XREF: glBegin(x)r
; __declspec(dllimport)	__stdcall glBitmap(x, x, x, x, x, x, x)
		extrn __imp__glBitmap@28:dword ; DATA XREF: glBitmap(x,x,x,x,x,x,x)r
; __declspec(dllimport)	__stdcall glCallList(x)
		extrn __imp__glCallList@4:dword	; DATA XREF: glCallList(x)r
; __declspec(dllimport)	__stdcall glCallLists(x, x, x)
		extrn __imp__glCallLists@12:dword ; DATA XREF: glCallLists(x,x,x)r
; __declspec(dllimport)	__stdcall glClear(x)
		extrn __imp__glClear@4:dword ; DATA XREF: glClear(x)r
; __declspec(dllimport)	__stdcall glClearColor(x, x, x,	x)
		extrn __imp__glClearColor@16:dword ; DATA XREF:	glClearColor(x,x,x,x)r
		extrn _opengl32_NULL_THUNK_DATA:byte:4Ch
;
; Imports from user32.dll
;
; BOOL __stdcall UpdateWindow(HWND hWnd)
		extrn __imp__UpdateWindow@4:dword ; DATA XREF: UpdateWindow(x)r
; BOOL __stdcall TranslateMessage(const	MSG *lpMsg)
		extrn __imp__TranslateMessage@4:dword ;	DATA XREF: TranslateMessage(x)r
; BOOL __stdcall ShowWindow(HWND hWnd, int nCmdShow)
		extrn __imp__ShowWindow@8:dword	; DATA XREF: ShowWindow(x,x)r
; BOOL __stdcall SetSysColors(int cElements, const INT *lpaElements, const COLORREF *lpaRgbValues)
		extrn __imp__SetSysColors@12:dword ; DATA XREF:	SetSysColors(x,x,x)r
; HWND __stdcall SetCapture(HWND hWnd)
		extrn __imp__SetCapture@4:dword	; DATA XREF: SetCapture(x)r
; LRESULT __stdcall SendMessageA(HWND hWnd, UINT Msg, WPARAM wParam, LPARAM lParam)
		extrn __imp__SendMessageA@16:dword ; DATA XREF:	SendMessageA(x,x,x,x)r
; int __stdcall	ReleaseDC(HWND hWnd, HDC hDC)
		extrn __imp__ReleaseDC@8:dword ; DATA XREF: ReleaseDC(x,x)r
; BOOL __stdcall ReleaseCapture()
		extrn __imp__ReleaseCapture@0:dword ; DATA XREF: ReleaseCapture()r
; ATOM __stdcall RegisterClassW(const WNDCLASSW	*lpWndClass)
		extrn __imp__RegisterClassW@4:dword ; DATA XREF: RegisterClassW(x)r
; ATOM __stdcall RegisterClassExA(const	WNDCLASSEXA *)
		extrn __imp__RegisterClassExA@4:dword ;	DATA XREF: RegisterClassExA(x)r
; ATOM __stdcall RegisterClassA(const WNDCLASSA	*lpWndClass)
		extrn __imp__RegisterClassA@4:dword ; DATA XREF: RegisterClassA(x)r
; void __stdcall PostQuitMessage(int nExitCode)
		extrn __imp__PostQuitMessage@4:dword ; DATA XREF: PostQuitMessage(x)r
; BOOL __stdcall PostMessageA(HWND hWnd, UINT Msg, WPARAM wParam, LPARAM lParam)
		extrn __imp__PostMessageA@16:dword ; DATA XREF:	PostMessageA(x,x,x,x)r
; BOOL __stdcall PeekMessageA(LPMSG lpMsg, HWND	hWnd, UINT wMsgFilterMin, UINT wMsgFilterMax, UINT wRemoveMsg)
		extrn __imp__PeekMessageA@20:dword ; DATA XREF:	PeekMessageA(x,x,x,x,x)r
; int __stdcall	MessageBoxA(HWND hWnd, LPCSTR lpText, LPCSTR lpCaption,	UINT uType)
		extrn __imp__MessageBoxA@16:dword ; DATA XREF: MessageBoxA(x,x,x,x)r
; HMENU	__stdcall LoadMenuA(HINSTANCE hInstance, LPCSTR	lpMenuName)
		extrn __imp__LoadMenuA@8:dword ; DATA XREF: LoadMenuA(x,x)r
; HICON	__stdcall LoadIconA(HINSTANCE hInstance, LPCSTR	lpIconName)
		extrn __imp__LoadIconA@8:dword ; DATA XREF: LoadIconA(x,x)r
; HCURSOR __stdcall LoadCursorA(HINSTANCE hInstance, LPCSTR lpCursorName)
		extrn __imp__LoadCursorA@8:dword ; DATA	XREF: LoadCursorA(x,x)r
; BOOL __stdcall InvalidateRect(HWND hWnd, const RECT *lpRect, BOOL bErase)
		extrn __imp__InvalidateRect@12:dword ; DATA XREF: InvalidateRect(x,x,x)r
; BOOL __stdcall GetWindowRect(HWND hWnd, LPRECT lpRect)
		extrn __imp__GetWindowRect@8:dword ; DATA XREF:	GetWindowRect(x,x)r
; int __stdcall	GetSystemMetrics(int nIndex)
		extrn __imp__GetSystemMetrics@4:dword ;	DATA XREF: GetSystemMetrics(x)r
; DWORD	__stdcall GetSysColor(int nIndex)
		extrn __imp__GetSysColor@4:dword ; DATA	XREF: GetSysColor(x)r
; BOOL __stdcall GetMessageA(LPMSG lpMsg, HWND hWnd, UINT wMsgFilterMin, UINT wMsgFilterMax)
		extrn __imp__GetMessageA@16:dword ; DATA XREF: GetMessageA(x,x,x,x)r
; SHORT	__stdcall GetKeyState(int nVirtKey)
		extrn __imp__GetKeyState@4:dword ; DATA	XREF: GetKeyState(x)r
; HWND __stdcall GetFocus()
		extrn __imp__GetFocus@0:dword ;	DATA XREF: GetFocus()r
; HDC __stdcall	GetDC(HWND hWnd)
		extrn __imp__GetDC@4:dword ; DATA XREF:	GetDC(x)r
; BOOL __stdcall GetCursorPos(LPPOINT lpPoint)
		extrn __imp__GetCursorPos@4:dword ; DATA XREF: GetCursorPos(x)r
; BOOL __stdcall GetClientRect(HWND hWnd, LPRECT lpRect)
		extrn __imp__GetClientRect@8:dword ; DATA XREF:	GetClientRect(x,x)r
; BOOL __stdcall EndPaint(HWND hWnd, const PAINTSTRUCT *lpPaint)
		extrn __imp__EndPaint@8:dword ;	DATA XREF: EndPaint(x,x)r
; LRESULT __stdcall DispatchMessageA(const MSG *lpMsg)
		extrn __imp__DispatchMessageA@4:dword ;	DATA XREF: DispatchMessageA(x)r
; BOOL __stdcall DestroyWindow(HWND hWnd)
		extrn __imp__DestroyWindow@4:dword ; DATA XREF:	DestroyWindow(x)r
; LRESULT __stdcall DefWindowProcA(HWND	hWnd, UINT Msg,	WPARAM wParam, LPARAM lParam)
		extrn __imp__DefWindowProcA@16:dword ; DATA XREF: DefWindowProcA(x,x,x,x)r
; HWND __stdcall CreateWindowExW(DWORD dwExStyle, LPCWSTR lpClassName, LPCWSTR lpWindowName, DWORD dwStyle, int	X, int Y, int nWidth, int nHeight, HWND	hWndParent, HMENU hMenu, HINSTANCE hInstance, LPVOID lpParam)
		extrn __imp__CreateWindowExW@48:dword
					; DATA XREF: CreateWindowExW(x,x,x,x,x,x,x,x,x,x,x,x)r
; HWND __stdcall CreateWindowExA(DWORD dwExStyle, LPCSTR lpClassName, LPCSTR lpWindowName, DWORD dwStyle, int X, int Y,	int nWidth, int	nHeight, HWND hWndParent, HMENU	hMenu, HINSTANCE hInstance, LPVOID lpParam)
		extrn __imp__CreateWindowExA@48:dword
					; DATA XREF: CreateWindowExA(x,x,x,x,x,x,x,x,x,x,x,x)r
; HDC __stdcall	BeginPaint(HWND	hWnd, LPPAINTSTRUCT lpPaint)
		extrn __imp__BeginPaint@8:dword	; DATA XREF: BeginPaint(x,x)r
; BOOL __stdcall AdjustWindowRect(LPRECT lpRect, DWORD dwStyle,	BOOL bMenu)
		extrn __imp__AdjustWindowRect@12:dword ; DATA XREF: AdjustWindowRect(x,x,x)r
		extrn _user32_NULL_THUNK_DATA:byte:48h

; Section 5. (virtual address 00006000)
; Virtual size			: 000002F6 (	758.)
; Section size in file		: 00000400 (   1024.)
; Offset to raw	data for section: 00003200
; Flags	40000040: Data Readable
; Alignment	: default
; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rsrc		segment	para public 'DATA' use32
		assume cs:_rsrc
		;org 406000h
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    1
		db    0
		db    4
		db    0
		db    0
		db    0
		db  18h
		db    0
		db    0
		db  80h	; Ђ
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    1
		db    0
		db  10h
		db  27h	; '
		db    0
		db    0
		db  30h	; 0
		db    0
		db    0
		db  80h	; Ђ
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    1
		db    0
		db    9
		db    4
		db    0
		db    0
		db  48h	; H
		db    0
		db    0
		db    0
		db  70h	; p
		db  61h	; a
		db    0
		db    0
		db  6Ah	; j
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db  10h
		db    0
		db  26h	; &
		db    0
		db  46h	; F
		db    0
		db  69h	; i
		db    0
		db  6Ch	; l
		db    0
		db  65h	; e
		db    0
		db    0
		db    0
		db    0
		db    0
		db  14h
		db  27h	; '
		db  26h	; &
		db    0
		db  4Fh	; O
		db    0
		db  70h	; p
		db    0
		db  65h	; e
		db    0
		db  6Eh	; n
		db    0
		db    0
		db    0
		db    0
		db    0
		db  15h
		db  27h	; '
		db  26h	; &
		db    0
		db  43h	; C
		db    0
		db  6Ch	; l
		db    0
		db  6Fh	; o
		db    0
		db  73h	; s
		db    0
		db  65h	; e
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db  80h	; Ђ
		db    0
		db  16h
		db  27h	; '
		db  26h	; &
		db    0
		db  45h	; E
		db    0
		db  78h	; x
		db    0
		db  69h	; i
		db    0
		db  74h	; t
		db    0
		db    0
		db    0
		db    0
		db    0
		db  12h
		db  27h	; '
		db  26h	; &
		db    0
		db  45h	; E
		db    0
		db  64h	; d
		db    0
		db  69h	; i
		db    0
		db  74h	; t
		db    0
		db    0
		db    0
		db  80h	; Ђ
		db    0
		db  13h
		db  27h	; '
		db  26h	; &
		db    0
		db  48h	; H
		db    0
		db  65h	; e
		db    0
		db  6Ch	; l
		db    0
		db  70h	; p
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		align 1000h
_rsrc		ends


		end start
